// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// initializeTerralib
void initializeTerralib();
RcppExport SEXP TrajDataAccess_initializeTerralib() {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    initializeTerralib();
    return R_NilValue;
END_RCPP
}
// finalizeTerralib
void finalizeTerralib();
RcppExport SEXP TrajDataAccess_finalizeTerralib() {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    finalizeTerralib();
    return R_NilValue;
END_RCPP
}
// getTrajectoryByTerralibXPtr
SEXP getTrajectoryByTerralibXPtr(SEXP datasource, SEXP dataset);
RcppExport SEXP TrajDataAccess_getTrajectoryByTerralibXPtr(SEXP datasourceSEXP, SEXP datasetSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type datasource(datasourceSEXP);
    Rcpp::traits::input_parameter< SEXP >::type dataset(datasetSEXP);
    __result = Rcpp::wrap(getTrajectoryByTerralibXPtr(datasource, dataset));
    return __result;
END_RCPP
}
// getTrajectoryByTerralib
SEXP getTrajectoryByTerralib(SEXP datasource, SEXP dataset);
RcppExport SEXP TrajDataAccess_getTrajectoryByTerralib(SEXP datasourceSEXP, SEXP datasetSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type datasource(datasourceSEXP);
    Rcpp::traits::input_parameter< SEXP >::type dataset(datasetSEXP);
    __result = Rcpp::wrap(getTrajectoryByTerralib(datasource, dataset));
    return __result;
END_RCPP
}
// getTrajectoryByTerralibTraj
SEXP getTrajectoryByTerralibTraj();
RcppExport SEXP TrajDataAccess_getTrajectoryByTerralibTraj() {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    __result = Rcpp::wrap(getTrajectoryByTerralibTraj());
    return __result;
END_RCPP
}
// getSubTrajectoryByTerralibTraj
SEXP getSubTrajectoryByTerralibTraj(SEXP datasource, SEXP dataset);
RcppExport SEXP TrajDataAccess_getSubTrajectoryByTerralibTraj(SEXP datasourceSEXP, SEXP datasetSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type datasource(datasourceSEXP);
    Rcpp::traits::input_parameter< SEXP >::type dataset(datasetSEXP);
    __result = Rcpp::wrap(getSubTrajectoryByTerralibTraj(datasource, dataset));
    return __result;
END_RCPP
}
// getTrajectoryByTerralibStBoxXPtr
SEXP getTrajectoryByTerralibStBoxXPtr(SEXP datasource, SEXP dataset, SEXP envelope, SEXP period);
RcppExport SEXP TrajDataAccess_getTrajectoryByTerralibStBoxXPtr(SEXP datasourceSEXP, SEXP datasetSEXP, SEXP envelopeSEXP, SEXP periodSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type datasource(datasourceSEXP);
    Rcpp::traits::input_parameter< SEXP >::type dataset(datasetSEXP);
    Rcpp::traits::input_parameter< SEXP >::type envelope(envelopeSEXP);
    Rcpp::traits::input_parameter< SEXP >::type period(periodSEXP);
    __result = Rcpp::wrap(getTrajectoryByTerralibStBoxXPtr(datasource, dataset, envelope, period));
    return __result;
END_RCPP
}
// getTrajectoryByTerralibStBox
SEXP getTrajectoryByTerralibStBox(SEXP datasource, SEXP dataset, SEXP envelope, SEXP period);
RcppExport SEXP TrajDataAccess_getTrajectoryByTerralibStBox(SEXP datasourceSEXP, SEXP datasetSEXP, SEXP envelopeSEXP, SEXP periodSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type datasource(datasourceSEXP);
    Rcpp::traits::input_parameter< SEXP >::type dataset(datasetSEXP);
    Rcpp::traits::input_parameter< SEXP >::type envelope(envelopeSEXP);
    Rcpp::traits::input_parameter< SEXP >::type period(periodSEXP);
    __result = Rcpp::wrap(getTrajectoryByTerralibStBox(datasource, dataset, envelope, period));
    return __result;
END_RCPP
}
// LoadTrajectoryDataSetFromPostGIS
void LoadTrajectoryDataSetFromPostGIS();
RcppExport SEXP TrajDataAccess_LoadTrajectoryDataSetFromPostGIS() {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    LoadTrajectoryDataSetFromPostGIS();
    return R_NilValue;
END_RCPP
}
// LoadTrajectoryDataSetFromPostGIS2
void LoadTrajectoryDataSetFromPostGIS2(SEXP datasource, SEXP dataset);
RcppExport SEXP TrajDataAccess_LoadTrajectoryDataSetFromPostGIS2(SEXP datasourceSEXP, SEXP datasetSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type datasource(datasourceSEXP);
    Rcpp::traits::input_parameter< SEXP >::type dataset(datasetSEXP);
    LoadTrajectoryDataSetFromPostGIS2(datasource, dataset);
    return R_NilValue;
END_RCPP
}
// receiveReturnXPTR
SEXP receiveReturnXPTR(SEXP teste);
RcppExport SEXP TrajDataAccess_receiveReturnXPTR(SEXP testeSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type teste(testeSEXP);
    __result = Rcpp::wrap(receiveReturnXPTR(teste));
    return __result;
END_RCPP
}
// receiveReturnPartsXPTR
SEXP receiveReturnPartsXPTR(SEXP teste);
RcppExport SEXP TrajDataAccess_receiveReturnPartsXPTR(SEXP testeSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type teste(testeSEXP);
    __result = Rcpp::wrap(receiveReturnPartsXPTR(teste));
    return __result;
END_RCPP
}
// getPartsXPTR
SEXP getPartsXPTR(SEXP teste, int division);
RcppExport SEXP TrajDataAccess_getPartsXPTR(SEXP testeSEXP, SEXP divisionSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type teste(testeSEXP);
    Rcpp::traits::input_parameter< int >::type division(divisionSEXP);
    __result = Rcpp::wrap(getPartsXPTR(teste, division));
    return __result;
END_RCPP
}
// getSpecificPartsXPTR
SEXP getSpecificPartsXPTR(SEXP teste, int part, int division);
RcppExport SEXP TrajDataAccess_getSpecificPartsXPTR(SEXP testeSEXP, SEXP partSEXP, SEXP divisionSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type teste(testeSEXP);
    Rcpp::traits::input_parameter< int >::type part(partSEXP);
    Rcpp::traits::input_parameter< int >::type division(divisionSEXP);
    __result = Rcpp::wrap(getSpecificPartsXPTR(teste, part, division));
    return __result;
END_RCPP
}
// getTrajectoryByTrajID
SEXP getTrajectoryByTrajID(SEXP datasource, SEXP dataset, std::string id);
RcppExport SEXP TrajDataAccess_getTrajectoryByTrajID(SEXP datasourceSEXP, SEXP datasetSEXP, SEXP idSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type datasource(datasourceSEXP);
    Rcpp::traits::input_parameter< SEXP >::type dataset(datasetSEXP);
    Rcpp::traits::input_parameter< std::string >::type id(idSEXP);
    __result = Rcpp::wrap(getTrajectoryByTrajID(datasource, dataset, id));
    return __result;
END_RCPP
}
// getTrajectoryByObjID
SEXP getTrajectoryByObjID(SEXP datasource, SEXP dataset, std::string id);
RcppExport SEXP TrajDataAccess_getTrajectoryByObjID(SEXP datasourceSEXP, SEXP datasetSEXP, SEXP idSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type datasource(datasourceSEXP);
    Rcpp::traits::input_parameter< SEXP >::type dataset(datasetSEXP);
    Rcpp::traits::input_parameter< std::string >::type id(idSEXP);
    __result = Rcpp::wrap(getTrajectoryByObjID(datasource, dataset, id));
    return __result;
END_RCPP
}
// getSpecificPartsDB
SEXP getSpecificPartsDB(SEXP datasource, SEXP dataset, int part, int division);
RcppExport SEXP TrajDataAccess_getSpecificPartsDB(SEXP datasourceSEXP, SEXP datasetSEXP, SEXP partSEXP, SEXP divisionSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type datasource(datasourceSEXP);
    Rcpp::traits::input_parameter< SEXP >::type dataset(datasetSEXP);
    Rcpp::traits::input_parameter< int >::type part(partSEXP);
    Rcpp::traits::input_parameter< int >::type division(divisionSEXP);
    __result = Rcpp::wrap(getSpecificPartsDB(datasource, dataset, part, division));
    return __result;
END_RCPP
}
// getTrajectoryByObjIDList
SEXP getTrajectoryByObjIDList(SEXP datasource, SEXP dataset, SEXP idlist);
RcppExport SEXP TrajDataAccess_getTrajectoryByObjIDList(SEXP datasourceSEXP, SEXP datasetSEXP, SEXP idlistSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type datasource(datasourceSEXP);
    Rcpp::traits::input_parameter< SEXP >::type dataset(datasetSEXP);
    Rcpp::traits::input_parameter< SEXP >::type idlist(idlistSEXP);
    __result = Rcpp::wrap(getTrajectoryByObjIDList(datasource, dataset, idlist));
    return __result;
END_RCPP
}
// getTrajectoryFromKML
SEXP getTrajectoryFromKML();
RcppExport SEXP TrajDataAccess_getTrajectoryFromKML() {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    __result = Rcpp::wrap(getTrajectoryFromKML());
    return __result;
END_RCPP
}
// getTrajectoryFromDB
SEXP getTrajectoryFromDB(const std::string& tableName);
RcppExport SEXP TrajDataAccess_getTrajectoryFromDB(SEXP tableNameSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const std::string& >::type tableName(tableNameSEXP);
    __result = Rcpp::wrap(getTrajectoryFromDB(tableName));
    return __result;
END_RCPP
}
// getTrajectoryKMLAsText
SEXP getTrajectoryKMLAsText();
RcppExport SEXP TrajDataAccess_getTrajectoryKMLAsText() {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    __result = Rcpp::wrap(getTrajectoryKMLAsText());
    return __result;
END_RCPP
}
// getTrajectoryKMLAsText2
SEXP getTrajectoryKMLAsText2(const std::string& dataset, const std::string& id);
RcppExport SEXP TrajDataAccess_getTrajectoryKMLAsText2(SEXP datasetSEXP, SEXP idSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const std::string& >::type dataset(datasetSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type id(idSEXP);
    __result = Rcpp::wrap(getTrajectoryKMLAsText2(dataset, id));
    return __result;
END_RCPP
}
// getTrajectoryDBAsText
SEXP getTrajectoryDBAsText(const std::string& tableName);
RcppExport SEXP TrajDataAccess_getTrajectoryDBAsText(SEXP tableNameSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const std::string& >::type tableName(tableNameSEXP);
    __result = Rcpp::wrap(getTrajectoryDBAsText(tableName));
    return __result;
END_RCPP
}
// getTrajectoryKMLAsVectorList
SEXP getTrajectoryKMLAsVectorList();
RcppExport SEXP TrajDataAccess_getTrajectoryKMLAsVectorList() {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    __result = Rcpp::wrap(getTrajectoryKMLAsVectorList());
    return __result;
END_RCPP
}
// getTrajectoryGivenKMLAsVectorList
SEXP getTrajectoryGivenKMLAsVectorList(const std::string& selected, const std::string& name);
RcppExport SEXP TrajDataAccess_getTrajectoryGivenKMLAsVectorList(SEXP selectedSEXP, SEXP nameSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const std::string& >::type selected(selectedSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type name(nameSEXP);
    __result = Rcpp::wrap(getTrajectoryGivenKMLAsVectorList(selected, name));
    return __result;
END_RCPP
}
// getTrajectoryDBAsVectorList
SEXP getTrajectoryDBAsVectorList(const std::string& tableName);
RcppExport SEXP TrajDataAccess_getTrajectoryDBAsVectorList(SEXP tableNameSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const std::string& >::type tableName(tableNameSEXP);
    __result = Rcpp::wrap(getTrajectoryDBAsVectorList(tableName));
    return __result;
END_RCPP
}
// getTrajectoryKMLAsListOfLists
SEXP getTrajectoryKMLAsListOfLists();
RcppExport SEXP TrajDataAccess_getTrajectoryKMLAsListOfLists() {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    __result = Rcpp::wrap(getTrajectoryKMLAsListOfLists());
    return __result;
END_RCPP
}
